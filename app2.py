# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jH4lhE9F5y7bLeIIqpGyg2qqVsxFrgjU
"""

from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import math
import AMD_Tools4 as amd  # AMD_Tools4.py が同じディレクトリにある前提

app = Flask(__name__)

@app.route("/get_temp", methods=["POST"])
def get_climate_data():
    d = request.get_json()
    lat, lon = map(float, (d["lat"], d["lon"]))
    threshold = float(d["threshold"])
    gdd1_target = float(d["gdd1"])
    ct1_start = datetime.fromisoformat(d["ct1_start"]).date()  
    ct1_end   = datetime.fromisoformat(d["ct1_end"]).date()
    threshold2 = float(d["threshold2"])
    gdd2_target = float(d["gdd2"])
    ct2_start = datetime.fromisoformat(d["ct2_start"]).date()  
    ct2_end   = datetime.fromisoformat(d["ct2_end"]).date()
    
    today = datetime.utcnow().date()
    this_year = today.year if today.month >= 4 else today.year - 1
    start_year = this_year - 3

    # --- 平年値の計算（過去3年） ---
    all_years_data = []
    for year in range(start_year, start_year + 3):
        start = f"{year}-04-01"
        end = f"{year+1}-03-31"
        temp, tim, *_ = amd.GetMetData("TMP_mea", [start, end], [lat, lat, lon, lon])
        flat_temp = temp[:, 0, 0]

        df = pd.DataFrame({
            "datetime": pd.to_datetime(tim),
            "tave": flat_temp
        })
        df["month_day"] = df["datetime"].dt.strftime("%m-%d")
        all_years_data.append(df[["month_day", "tave"]])

    df_concat = pd.concat(all_years_data)
    df_avg = df_concat.groupby("month_day", as_index=False)["tave"].mean()
    df_avg.rename(columns={"tave": "tave_avg"}, inplace=True)

    # 並び替え（4月始まり）
    def reorder_from_april(df):
        df = df.copy()
        df["sort_key"] = pd.to_datetime("2000-" + df["month_day"])
        df = df.sort_values("sort_key").reset_index(drop=True)
        start_idx = df[df["month_day"] == "04-01"].index[0]
        return pd.concat([df.iloc[start_idx:], df.iloc[:start_idx]]).drop(columns=["sort_key"]).reset_index(drop=True)

    df_avg = reorder_from_april(df_avg)
    df_avg["tave_avg"] = df_avg["tave_avg"].round(1)

    # --- 今年度の実測値（＋タグ） ---
    start_this = f"{this_year}-04-01"
    end_this = f"{this_year + 1}-03-31"
    temp_this, tim_this, *_ = amd.GetMetData("TMP_mea", [start_this, end_this], [lat, lat, lon, lon])
    prcp_this, *_ = amd.GetMetData("APCPRA",  [start_this, end_this], [lat, lat, lon, lon])
    df_this = pd.DataFrame({
        "date"      : pd.to_datetime(tim_this).map(lambda d: d.date()),
        "tave_this" : temp_this[:, 0, 0],
        "prcp_this" : prcp_this[:, 0, 0]       
    })    

    yesterday = today - timedelta(days=1)
    forecast_end = today + timedelta(days=26)

    def assign_tag(d):
        if d <= yesterday:
            return "past"
        elif d <= forecast_end:
            return "forecast"
        else:
            return "normal"
    df_this["tag"] = df_this["date"].map(assign_tag)

    df_forecast = (
        df_this.loc[df_this["tag"] == "forecast"]
                .reset_index(drop=True)
    )
    
    # 例：必要に応じて日付を文字列化して返却用に整形
    df_forecast["date"] = df_forecast["date"].map(lambda d: d.isoformat())
    
    # --------------------------------------------------------------------------
    # ① month_day 列を追加してキーをそろえる
    # --------------------------------------------------------------------------
    df_this["month_day"] = df_this["date"].map(lambda d: d.strftime("%m-%d"))
    
    # --------------------------------------------------------------------------
    # ② 平年値 df_avg と結合して tave_avg を取得
    # --------------------------------------------------------------------------
    df_this = df_this.merge(df_avg[["month_day", "tave_avg"]], on="month_day", how="left")
    
    # --------------------------------------------------------------------------
    # ③ "normal" 行だけ今年度値を平年値で置換
    # --------------------------------------------------------------------------
    mask = df_this["tag"] == "normal"
    df_this.loc[mask, "tave_this"] = df_this.loc[mask, "tave_avg"]
    
    # --------------------------------------------------------------------------
    # ④ もう使わない列を整理
    # --------------------------------------------------------------------------
    df_this.drop(columns=["month_day", "tave_avg"], inplace=True)

     # --- 積算範囲1 ---
    ct1_start = datetime.fromisoformat(d["ct1_start"]).date()
    ct1_end   = datetime.fromisoformat(d["ct1_end"]).date()
    
    mask = (df_this["date"] >= ct1_start) & (df_this["date"] <= ct1_end)
    df_ct1_period = df_this.loc[mask].reset_index(drop=True)

    # ──────────────────────────────────────────
    # 1. 積算温度 DataFrame の作成
    #    ① 日ごとの増分: max(0, tave - threshold)
    #    ② 累積: 上記増分を累積和
    # ──────────────────────────────────────────
    df_ct1 = df_ct1_period.copy()
    
    # 日増分（閾値以下なら 0）
    df_ct1["daily_ct"] = (df_ct1["tave_this"] - threshold)\
                               .clip(lower=0)\
                               .round(1)          # 小数 1 位に丸め（好みで）
    
    # 累積和
    df_ct1["cum_ct"] = df_ct1["daily_ct"].cumsum().round(1)

    # ③ 日ごとの降水量（小数 1 位に丸めたい場合は .round(1)）
    df_ct1["daily_pr"] = df_ct1["prcp_this"].round(1)
    
    # ④ 累積降水量
    df_ct1["cum_pr"] = df_ct1["daily_pr"].cumsum().round(1)

    # ───────────────────────────────────────────────
    # 1. 目標値に最も近い日を抽出
    # ───────────────────────────────────────────────
    df_ct1["abs_diff"] = (df_ct1["cum_ct"] - gdd1_target).abs()
    idx_closest = df_ct1["abs_diff"].idxmin()      # 最小誤差の行番号
    row_close   = df_ct1.loc[idx_closest]

    
    # ───────────────────────────────────────────────
    # 2. JSON 返却用に date を文字列化
    # ───────────────────────────────────────────────
    closest_dict = {
        "date"      : row_close["date"].isoformat(),   # YYYY-MM-DD
        "cum_ct"    : round(row_close["cum_ct"], 1),   # 積算温度
        "daily_ct"  : round(row_close["daily_ct"], 1), # 参考：当日の増分
        "abs_diff"  : round(row_close["abs_diff"], 1)  # 誤差
    }
    
     # --- 積算範囲2 ---
    ct2_start = datetime.fromisoformat(d["ct2_start"]).date()
    ct2_end   = datetime.fromisoformat(d["ct2_end"]).date()
    
    mask = (df_this["date"] >= ct1_start) & (df_this["date"] <= ct1_end)
    df_ct2_period = df_this.loc[mask].reset_index(drop=True)

    # ──────────────────────────────────────────
    # 1. 積算温度 DataFrame の作成
    #    ① 日ごとの増分: max(0, tave - threshold)
    #    ② 累積: 上記増分を累積和
    # ──────────────────────────────────────────
    df_ct2 = df_ct2_period.copy()
    
    # 日増分（閾値以下なら 0）
    df_ct2["daily_ct"] = (df_ct2["tave_this"] - threshold2)\
                               .clip(lower=0)\
                               .round(1)          # 小数 1 位に丸め（好みで）
    
    # 累積和
    df_ct2["cum_ct"] = df_ct2["daily_ct"].cumsum().round(1)

    # ③ 日ごとの降水量（小数 1 位に丸めたい場合は .round(1)）
    df_ct2["daily_pr"] = df_ct2["prcp_this"].round(1)
    
    # ④ 累積降水量
    df_ct2["cum_pr"] = df_ct2["daily_pr"].cumsum().round(1)

    # ───────────────────────────────────────────────
    # 1. 目標値に最も近い日を抽出
    # ───────────────────────────────────────────────
    df_ct2["abs_diff"] = (df_ct2["cum_ct"] - gdd2_target).abs()
    idx_closest = df_ct2["abs_diff"].idxmin()      # 最小誤差の行番号
    row_close   = df_ct2.loc[idx_closest]

    
    # ───────────────────────────────────────────────
    # 2. JSON 返却用に date を文字列化
    # ───────────────────────────────────────────────
    closest2_dict = {
        "date"      : row_close["date"].isoformat(),   # YYYY-MM-DD
        "cum_ct"    : round(row_close["cum_ct"], 1),   # 積算温度
        "daily_ct"  : round(row_close["daily_ct"], 1), # 参考：当日の増分
        "abs_diff"  : round(row_close["abs_diff"], 1)  # 誤差
    }
    
    # NaN → None 対応
    def replace_nan_with_none(data):
        if isinstance(data, list):
            return [replace_nan_with_none(x) for x in data]
        elif isinstance(data, dict):
            return {k: replace_nan_with_none(v) for k, v in data.items()}
        elif isinstance(data, float) and math.isnan(data):
            return None
        else:
            return data
            
    # ここで date 列を文字列へ統一      
    df_this["date"] = df_this["date"].map(lambda d: d.isoformat())   
    df_ct1_period["date"] = df_ct1_period["date"].map(lambda d: d.isoformat()) 
    df_ct1["date"] = df_ct1["date"].map(lambda d: d.isoformat()) 
    df_ct2["date"] = df_ct2["date"].map(lambda d: d.isoformat()) 
    
    df_avg_clean = replace_nan_with_none(df_avg.to_dict(orient="records"))
    df_this_clean = replace_nan_with_none(df_this.to_dict(orient="records"))
    df_ct1_period_clean = replace_nan_with_none(df_ct1_period.to_dict(orient="records"))
    df_ct1_clean = replace_nan_with_none(df_ct1.to_dict(orient="records"))
    df_ct2_clean = replace_nan_with_none(df_ct2.to_dict(orient="records"))
    df_forecast_clean = replace_nan_with_none(df_forecast.to_dict(orient="records"))

    return jsonify({
        "average": df_avg_clean,
        "this_year": df_this_clean,
        "ct1_period": df_ct1_period_clean,
        "ct1"       : df_ct1_clean,
        "gdd1_target": closest_dict,
        "ct2_period": df_ct2_period_clean,
        "ct2"       : df_ct2_clean,
        "gdd2_target": closest2_dict,
        "forecast": df_forecast_clean
    })

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
