# -*- coding: utf-8 -*-
"""app2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jH4lhE9F5y7bLeIIqpGyg2qqVsxFrgjU
"""

from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import math
import AMD_Tools4 as amd  # AMD_Tools4.py が同じディレクトリにある前提

app = Flask(__name__)

@app.route("/get_temp", methods=["POST"])
def get_climate_data():
    d = request.get_json()
    lat, lon = map(float, (d["lat"], d["lon"]))

    today = datetime.utcnow().date()
    this_year = today.year if today.month >= 4 else today.year - 1
    start_year = this_year - 3          # ── 過去3年平均を計算 ──────────────────
    # --- 平年値（過去3年平均） ----------------------------------------------------
    all_years_data = []
    for year in range(start_year, start_year + 3):
        start = f"{year}-04-01"
        end   = f"{year+1}-03-31"
        temp, tim, *_ = amd.GetMetData("TMP_mea", [start, end], [lat, lat, lon, lon])
        all_years_data.append(
            pd.DataFrame({
                "month_day": pd.to_datetime(tim).strftime("%m-%d"),
                "tave"     : temp[:, 0, 0]
            })
        )

    df_avg = (
        pd.concat(all_years_data)
          .groupby("month_day", as_index=False)["tave"]
          .mean()
          .rename(columns={"tave": "tave_avg"})
    )

    # --- 今年度の実測値 -----------------------------------------------------------
    start_this, end_this = f"{this_year}-04-01", f"{this_year+1}-03-31"
    temp_this, tim_this, *_ = amd.GetMetData("TMP_mea", [start_this, end_this],
                                             [lat, lat, lon, lon])

    df_this = pd.DataFrame({
        "date"      : pd.to_datetime(tim_this).map(lambda d: d.date()),
        "tave_this" : temp_this[:, 0, 0],     # 未来日は NaN のことが多い
    })
    df_this["month_day"] = df_this["date"].dt.strftime("%m-%d")  # ← NEW
    # タグ付け
    yesterday, forecast_end = today - timedelta(days=1), today + timedelta(days=26)
    df_this["tag"] = np.select(
        [df_this["date"] <= yesterday,
         df_this["date"] <= forecast_end],
        ["past", "forecast"],
        default="normal"
    )

    # --- ★ normal 行を平均値で置換する ★ -----------------------------------------
    df_this = df_this.merge(df_avg, on="month_day", how="left")
    normal_mask = df_this["tag"] == "normal"
    df_this.loc[normal_mask, "tave_this"] = df_this.loc[normal_mask, "tave_avg"]
    df_this.drop(columns=["month_day", "tave_avg"], inplace=True)

    # --- JSON 返却用に NaN → None 置換 -------------------------------------------
    def _nan2none(x):
        if isinstance(x, list):
            return [_nan2none(v) for v in x]
        if isinstance(x, dict):
            return {k: _nan2none(v) for k, v in x.items()}
        if isinstance(x, float) and math.isnan(x):
            return None
        return x

    return jsonify({
        "average"  : _nan2none(df_avg.to_dict(orient="records")),
        "this_year": _nan2none(df_this.to_dict(orient="records"))
    })
