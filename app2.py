# -*- coding: utf-8 -*-
"""app2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jH4lhE9F5y7bLeIIqpGyg2qqVsxFrgjU
"""

from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import math
import AMD_Tools4 as amd  # AMD_Tools4.py が同じディレクトリにある前提

app = Flask(__name__)

@app.route("/get_temp", methods=["POST"])
def get_climate_data():
    # --- 入力取得 ---------------------------------------------------------
    d = request.get_json(force=True)   # force=True で Content-Type が
                                       # 誤っていても読み取れる
    lat, lon = map(float, (d["lat"], d["lon"]))

    today      = datetime.utcnow().date()
    this_year  = today.year if today.month >= 4 else today.year - 1
    start_year = this_year - 3

    # --- 平年値 -----------------------------------------------------------
    all_years = []
    for y in range(start_year, start_year + 3):
        s, e = f"{y}-04-01", f"{y+1}-03-31"
        temp, tim, *_ = amd.GetMetData("TMP_mea", [s, e], [lat, lat, lon, lon])

        md = pd.to_datetime(tim).map(lambda x: x.strftime("%m-%d"))
        all_years.append(pd.DataFrame({"month_day": md,
                                       "tave": temp[:, 0, 0]}))

    df_avg = (
        pd.concat(all_years)
          .groupby("month_day", as_index=False)["tave"]
          .mean()
          .rename(columns={"tave": "tave_avg"})
    )

    # --- 今年度値 ---------------------------------------------------------
    s, e = f"{this_year}-04-01", f"{this_year+1}-03-31"
    temp, tim, *_ = amd.GetMetData("TMP_mea", [s, e], [lat, lat, lon, lon])

    df_this = pd.DataFrame({
        "date"      : pd.to_datetime(tim).map(lambda d: d.date()),
        "tave_this" : temp[:, 0, 0],
    })
    df_this["month_day"] = df_this["date"].map(lambda d: d.strftime("%m-%d"))

    # タグ付け
    yesterday, forecast_end = today - timedelta(days=1), today + timedelta(days=26)
    df_this["tag"] = np.select(
        [df_this["date"] <= yesterday,
         df_this["date"] <= forecast_end],
        ["past", "forecast"],
        default="normal"
    )

    # --- normal ➔ 平年値で置換 ------------------------------------------
    df_this = df_this.merge(df_avg, on="month_day", how="left")
    normal = df_this["tag"] == "normal"
    df_this.loc[normal, "tave_this"] = df_this.loc[normal, "tave_avg"]
    df_this.drop(columns=["month_day", "tave_avg"], inplace=True)

    # --- NaN を None に ---------------------------------------------------
    def _nan2none(obj):
        if isinstance(obj, float) and math.isnan(obj):
            return None
        if isinstance(obj, list):
            return [_nan2none(v) for v in obj]
        if isinstance(obj, dict):
            return {k: _nan2none(v) for k, v in obj.items()}
        return obj

    return jsonify({
        "average"  : _nan2none(df_avg.to_dict("records")),
        "this_year": _nan2none(df_this.to_dict("records"))
    })

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
