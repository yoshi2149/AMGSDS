# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oRsCWxMysO91NUXoRZ0gvPByuuaCxz2I
"""

!pip install -q flask pyngrok netCDF4
from google.colab import drive
drive.mount('/content/drive')
import sys, pathlib

module_dir = pathlib.Path('/content/drive/MyDrive/Colab Notebooks/AMGSD/pythonworks/temp_api')  # AMD_Tools4.py が入ったフォルダ
if module_dir.exists() and module_dir.is_dir():
    sys.path.append(str(module_dir))  # 既に入っていなければ追加入力
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import os
import pandas as pd
import numpy as np
import math
import AMD_Tools4 as amd  # あらかじめ Drive から読み込み済みとする

app = Flask(__name__)

def mock_GetMetData(element, timedomain, lalodomain):
    start_date = pd.to_datetime(timedomain[0])
    end_date = pd.to_datetime(timedomain[1])
    dates = pd.date_range(start=start_date, end=end_date, freq='D')
    n = len(dates)
    temps = 15 + 3 * np.random.randn(n, 1, 1)  # 仮の気温データ
    return temps, dates, None, None

@app.route("/get_temp", methods=["POST"])
def get_climate_data():
    d = request.get_json()
    lat, lon = map(float, (d["lat"], d["lon"]))

    today = datetime.utcnow().date()
    this_year = today.year if today.month >= 4 else today.year - 1
    start_year = this_year - 3

    # ① 平年値（過去3年平均）
    all_years_data = []

    for year in range(start_year, start_year + 3):
        start = f"{year}-04-01"
        end = f"{year+1}-03-31"
        temp, tim, *_ = amd.GetMetData("TMP_mea", [start, end], [lat, lat, lon, lon])
        flat_temp = temp[:, 0, 0]

        df = pd.DataFrame({
            "datetime": pd.to_datetime(tim),
            "tave": flat_temp
        })
        df["month_day"] = df["datetime"].dt.strftime("%m-%d")
        all_years_data.append(df[["month_day", "tave"]])

    # 全データを縦方向に結合（年を跨って結合）
    df_concat = pd.concat(all_years_data)

    # 月日ごとに平均（うるう年があっても安全）
    df_avg = df_concat.groupby("month_day", as_index=False)["tave"].mean()
    df_avg.rename(columns={"tave": "tave_avg"}, inplace=True)
    def reorder_from_april(df, date_col="month_day"):
        """
        与えられた DataFrame を '04-01' から始まるように並び替える関数
        df: pandas.DataFrame（"month_day"列が存在し、'MM-DD'形式の文字列が入っていること）
        date_col: 並び替え対象の列名（デフォルトは 'month_day'）
        """
        df = df.copy()
        df["sort_key"] = pd.to_datetime("2000-" + df[date_col])
        df_sorted = df.sort_values("sort_key").reset_index(drop=True)

        start_idx = df_sorted[df_sorted[date_col] == "04-01"].index[0]
        df_avg = pd.concat([
            df_sorted.loc[start_idx:],
            df_sorted.loc[:start_idx - 1]
        ]).reset_index(drop=True)

        return df_avg.drop(columns=["sort_key"])

    # 変換前の DataFrame: df (列 "month_day", "tave_avg")
    df_avg = reorder_from_april(df_avg)
    df_avg["tave_avg"] = df_avg["tave_avg"].round(1)

    # ② 今年度の実測＋平年値
    start_this = f"{this_year}-04-01"
    end_this = f"{this_year + 1}-03-31"

    temp_this, tim_this, *_ = amd.GetMetData("TMP_mea", [start_this, end_this], [lat, lat, lon, lon])
    df_this = pd.DataFrame({
        "date": pd.to_datetime(tim_this).map(lambda d: d.date()),
        "tave_this": temp_this[:, 0, 0]
    })

    # 属性タグ付け
    yesterday = today - timedelta(days=1)
    forecast_end = today + timedelta(days=26)

    def assign_tag(d):
        if d <= yesterday:
            return "past"
        elif d <= forecast_end:
            return "forecast"
        else:
            return "normal"

    df_this["tag"] = df_this["date"].map(assign_tag)
    df_this["date"] = df_this["date"].astype(str)


    # NaN → None 変換用ヘルパー関数
    def replace_nan_with_none(data):
        if isinstance(data, list):
            return [replace_nan_with_none(x) for x in data]
        elif isinstance(data, dict):
            return {k: replace_nan_with_none(v) for k, v in data.items()}
        elif isinstance(data, float) and math.isnan(data):
            return None
        else:
            return data
   # NaN → None に変換し、dictリストに変換
    df_avg_clean = df_avg.to_dict(orient="records")
    df_this_clean = df_this.to_dict(orient="records")

    df_avg_clean = replace_nan_with_none(df_avg_clean)
    df_this_clean = replace_nan_with_none(df_this_clean)

    return jsonify({
        "average": df_avg_clean,
        "this_year": df_this_clean
    })

from pyngrok import conf, ngrok

conf.get_default().auth_token = "2xUfmXNxSzb0uDFXmbQrZgl8uNj_5J7rTkPFrpYdK3PucXHiy"  # 一度だけ設定

public_url = ngrok.connect(8081, "http")
print("✅ GASに貼るURLはこちら：")
print(public_url)

if __name__ == "__main__":
    app.run(port=8081)